/* Generated By:JJTree: Do not edit this line. ASTString.java */

package com.gentics.lib.expressionparser.parser;

import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;
import com.gentics.lib.etc.StringUtils;

public class ASTString extends LiteralNode {
	protected String value;

	public ASTString(int id) {
		super(id);
	}

	public ASTString(Parser p, int id) {
		super(p, id);
	}

	public void setValue(String value) {
		this.value = StringUtils.unEscape(value.substring(1, value.length() - 1));
	}

	public String toString() {
		return value + " (String)";
	}

	protected Object getLiteralValue() {
		return value;
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		return ExpressionEvaluator.OBJECTTYPE_STRING;
	}
}
