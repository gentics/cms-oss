// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library@nexus') import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)


final def gitCommitTag         = '[Jenkins | ' + env.JOB_BASE_NAME + ']';

def branchName                 = null
def version                    = null
def releaseVersion             = ""
def tagName                    = null

pipeline {
    agent {
        kubernetes {
            label env.BUILD_TAG.take(63)
            defaultContainer 'build'
            yaml ocpWorker("""
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkinsbuild: true
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: jenkinsbuild
              operator: In
              values:
              - true
          topologyKey: kubernetes.io/hostname
  containers:
    - name: build
      image: docker.gentics.com/cms-oss/build-container:latest
      resources:
        requests:
          cpu: '0'
          memory: '0'
        limits:
          cpu: '0'
          memory: '0'
    - name: docker
      resources:
        limits:
          cpu: '0'
          memory: '0'
        requests:
          cpu: '0'
          memory: '0'
    - name: jnlp
      resources:
        limits:
          cpu: '0'
          memory: '0'
        requests:
          cpu: '0'
          memory: '0'
""")
        }
    }

    parameters {
        choice(name: 'variant', choices: ['OSS', 'EE'], description: 'Which type of CMS should be tested')
        string(name: 'cmsVersion', defaultValue: '', description: 'The docker image-version for the CMS which should be tested against')
        string(name: 'meshVersion', defaultValue: '', description: 'The docker image-version for Mesh which should be tested against')
    }

    options {
        withCredentials([usernamePassword(credentialsId: 'docker.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')])
        gitLabConnection('git.gentics.com')
        gitlabBuilds(builds: ['Jenkins build'])
        timestamps()
        timeout(time: 4, unit: 'HOURS')
        ansiColor('xterm')
    }

    stages {
        stage("UI Integration Tests") {
            when {
                expression {
                    return env.BUILD_SKIPPED != "true"
                }
            }

            environment {
                // Settings to determine what services we're testing against
                CMS_VARIANT = "${params.variant}"
                CI_CMS_VERSION = "${params.cmsVersion}"
                CI_MESH_VERSION = "${params.meshVersion}"

                // Always mark this as a CI run
                CI = "1"
            }

            steps {
                updateGitlabCommitStatus name: 'Jenkins build', state: "running"

                script {
                    withCredentials([ string(credentialsId: 'gtx-integration-tests-license', variable: 'CI_LICENSEKEY') ]) {
                        authDockerRegistry("docker.gentics.com", "docker.gentics.com")
                        def composeCmd = 'docker compose'
                        if (params.variant == 'EE') {
                            composeCmd = 'docker compose -f ./compose.ee.yml'
                        }

                        try {
                            dir(path: 'cms-integration-tests') {
                                // Start services
                                sh "${composeCmd} up -d --wait --quiet-pull"
                            }

                            dir(path: 'cms-ui') {
                                // Install depdendencies
                                sh "npm ci"
                                // Run the tests
                                sh "npm run many -- --targets=e2e --configuration=ci --output-style=static"
                            }
                        } finally {
                            dir(path: 'cms-integration-tests') {
                                // Stop and cleanup the services
                                sh "${composeCmd} down"
                            }
                        }
                    }
                }
            }

            post {
                always {
                    script {
                        junit testResults: "cms-ui/.reports/**/PLAYWRIGHT-report.xml", allowEmptyResults: true
                    }
                }
            }
        }
    }
}
