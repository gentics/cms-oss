h2. Synchronization of global IDs

When objects (tagtypes, datasources or object property definitions) were created independently on different systems, they will always be treated as different objects, which might lead to unwanted duplicates when using export and import.
In such cases, it is possible to use a command line tool to synchronize the global IDs between systems (i.e. to change the global IDs on one system to match the global IDs on the other system).

endprologue.

h3. Usage

WARNING: It is strongly recommended to stop the Tomcat on the target system before using the Tool. If this is not done, and modifications happen while the tool is used (even in between different steps), data may be corrupted.

Synchronization is done in multiple steps:

h4. Read the info from the source system

<shell>/cms$ java -cp cms-server.jar com.gentics.contentnode.tools.GlobalIdSync -read construct,objprop,datasource -out info.json</shell>

This will connect to the database (connection properties are read from the given config url), will read the global IDs of all objects of the specified type and will
output the result in JSON format into the file <code>info.json</code>

The format of the file <code>info.json</code> is as follows:

<shell>
{
	"constructs" : [
		{
			"globalid" : "A547.69478",
			"keyword" : "textshort",
			"name" : "Text (kurz)",
			"parts" : [
				{
					"globalid" : "A547.69484",
					"keyword" : "text",
					"name" : "Text",
					"value" : {
						"globalid" : "A547.69485",
						"keyword" : "text"
					}
				}
			],
			...
		},
		...
	],
	"objprops" : [
		{
			"globalid" : "A547.69486",
			"name" : "object.sortorder",
			"type" : 10002,
			"descriptivename" : "Sortierung",
			"prop" : {
				"globalid" : "A547.69497"
			}
		},
		...
	],
	"datasources" : [
		{
			"globalid" : "CA9B.74723",
			"name" : "[Basic] Floating",
			"entries" : [
				{
					"globalid" : "A547.75173",
					"key" : "Left / Links"
				},
				...
			]
		},
		...
	]
}
</shell>

h4. Transfer the file info.json to the target system

The file <code>info.json</code> must be copied to the target system. All following steps are done on the target system.

h4. Activate maintenance mode and stop tomcat on target system

While doing all following steps, it is mandatory, that absolutely no data is changed on the target system. It is best to activate the maintenance mode and stop the tomcat to achieve this.
Failing to do so may lead to data inconsistencies!

h4. Match the objects

<shell>/cms$ java -cp cms-server.jar com.gentics.contentnode.tools.GlobalIdSync -match info.json -out match.json</shell>

This will read the information from the file <code>info.json</code>, will match the objects against the database (connection property read from the given url) and will output matching information into the file <code>match.json</code> in JSON format.

The file <code>match.json</code> contains data similar to the file <code>info.json</code> with additional attributes <code>replaces</code> that contains the global IDs of the matching objects on the target system.

For example:
<shell>
{
	"objprops" : [
		{
			"globalid" : "A547.74284",
			"name" : "object.copyright",
			"type" : 10011,
			"descriptivename" : "Copyright",
			"prop" : {
				"globalid" : "A547.74293",
				"replaces" : "3D6C.79029"
			},
			"replaces" : "3D6C.79020"
		}
	]
}
</shell>

Which means that the object property definition with global ID *A547.74284* on the source system matches the object property definition with global ID *3D6C.79020* on the target system.
When the synchronization is done, the global ID *A547.74284* will replace global ID *3D6C.79020*.

The file <code>match.json</code> will only contain objects, that have different global ID, but are likely to be matching.

NOTE: The file should be inspected closely before doing the actual synchronization. Incorrect matches must be removed from the file.

h5. How the matching is done

h6. Tagtypes

Tagtypes are matched if the keyword is the same. For matching tagtypes, also the parts will be matched by identical keywords.
It may well be, that not all parts of the tagtype in the source system have matching parts of the tagtyp in the target system.
If the source tagtype  is imported into the target system (after the synchronisation), the source tagtype will overwrite the target tagtype.
Superfluous parts will be removed and missing parts will be added.

h6. Datasources

Datasources are matched if they have identical names. For matching datasources, the entries will be matched by identical keys.

h6. Object Property Definitions

Object property definitions are matched if they have identical names (tagnames, not the descriptive names).

h4. Check and possibly modify the file match.json

In this step, the file <code>match.json</code> may be modified by removing incorrect matches.

WARNING: It is strongly recommended to not do any other alterations to the file, especially not to change global IDs, as the result may be unexpected.

h4. Generate update SQL

<shell>/cms$ java -cp cms-server.jar com.gentics.contentnode.tools.GlobalIdSync -sql match.json -out update.sql</shell>

This will read the matching information from file <code>match.json</code> and will generate the SQL statements necessary to synchronize the global IDs.
The SQL statements will be written to the file <code>update.sql</code>.

h4. Generate and execute update SQL

<shell>/cms$ java -cp cms-server.jar com.gentics.contentnode.tools.GlobalIdSync -exec match.json -out update.sql</shell>

Same as the previous step, but will also *execute* the statements. This is the only step, that will actually change data in the database.

h4. Restart tomcat and disable maintenance mode

This will reactivate the system. After restarting the tomcat and before enabling the maintenance mode, the system may be tested for errors.

h3. Command Line Parameters

|_.Parameter      |_.Description                                                                                        |
| -out _[file]_   | Filename for writing output (depending on the current action)                                       |
| -read _[file]_  | Read the object info for the given object types (possible are *construct*, *objprop*, *datasource*) |
| -match _[file]_ | Match the object info read from the file                                                            |
| -sql _[file]_   | Create SQL Statements for updating the globalids                                                    |
| -exec _[file]_  | Create and execute SQL Statements for updating the globalids                                        |
