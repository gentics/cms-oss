/* Generated By:JJTree: Do not edit this line. ASTArray.java */

package com.gentics.lib.expressionparser.parser;

import java.util.Collection;
import java.util.Collections;
import java.util.Vector;

import com.gentics.api.lib.expressionparser.EvaluableExpression;
import com.gentics.api.lib.expressionparser.EvaluationException;
import com.gentics.api.lib.expressionparser.Expression;
import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.ExpressionQueryRequest;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;
import com.gentics.api.lib.expressionparser.filtergenerator.FilterPart;

public class ASTArray extends SimpleNode implements EvaluableExpression {
	public ASTArray(int id) {
		super(id);
	}

	public ASTArray(Parser p, int id) {
		super(p, id);
	}

	public Object evaluate(ExpressionQueryRequest request, int expectedValueType) throws ExpressionParserException {
		switch (expectedValueType) {
		case ExpressionEvaluator.OBJECTTYPE_COLLECTION:
		case ExpressionEvaluator.OBJECTTYPE_ANY:
			Collection literalValue = null;

			if (children != null) {
				literalValue = new Vector();
				for (int i = 0; i < children.length; i++) {
					if (children[i] instanceof EvaluableExpression) {
						literalValue.add(((EvaluableExpression) children[i]).evaluate(request, ExpressionEvaluator.OBJECTTYPE_ANY));
					}
				}
			} else {
				literalValue = Collections.EMPTY_LIST;
			}

			return literalValue;

		default:
			throw new EvaluationException(
					"Literal arrays can only be evaluated as collections (type " + ExpressionEvaluator.OBJECTTYPE_COLLECTION + ") but type {" + expectedValueType
					+ "} was requested");
		}
	}

	public void generateFilterPart(ExpressionQueryRequest request, FilterPart filterPart,
			int expectedValueType) throws ExpressionParserException {
		filterPart.addLiteral(evaluate(request, expectedValueType), expectedValueType);
	}

	public boolean isStatic(DatasourceFilter filter) throws ExpressionParserException {
		return true;
	}

	public boolean isVariable(DatasourceFilter filter) throws ExpressionParserException {
		return false;
	}

	/* (non-Javadoc)
	 * @see com.gentics.lib.expressionparser.Expression#getExpressionString()
	 */
	public String getExpressionString() {
		if (parent instanceof Expression) {
			return ((Expression) parent).getExpressionString();
		} else {
			return null;
		}
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#allowsNullValues()
	 */
	public boolean allowsNullValues(DatasourceFilter filter) throws ExpressionParserException {
		return true;
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		return ExpressionEvaluator.OBJECTTYPE_COLLECTION;
	}
}
