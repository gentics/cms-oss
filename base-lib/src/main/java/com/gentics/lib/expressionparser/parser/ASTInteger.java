/* Generated By:JJTree: Do not edit this line. ASTInteger.java */

package com.gentics.lib.expressionparser.parser;

import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;

public class ASTInteger extends LiteralNode {
	protected Number value;

	public ASTInteger(int id) {
		super(id);
	}

	public ASTInteger(Parser p, int id) {
		super(p, id);
	}

	public void setValue(String value) {
		if (value.endsWith("l") || value.endsWith("L")) {
			value = value.substring(0, value.length() - 1);
			if (value.startsWith("0x") || value.startsWith("0X")) {
				this.value = new Long(Long.parseLong(value.substring(2), 16));
			} else if (value.startsWith("0")) {
				this.value = new Long(Long.parseLong(value, 8));
			} else {
				this.value = new Long(Long.parseLong(value));
			}
		} else {
			if (value.startsWith("0x") || value.startsWith("0X")) {
				this.value = new Integer(Integer.parseInt(value.substring(2), 16));
			} else if (value.startsWith("0")) {
				this.value = new Integer(Integer.parseInt(value, 8));
			} else {
				this.value = new Integer(Integer.parseInt(value));
			}
		}
	}

	public String toString() {
		return value + " (Integer)";
	}

	protected Object getLiteralValue() {
		return value;
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		return ExpressionEvaluator.OBJECTTYPE_NUMBER;
	}
}
