/*
 * @author tobiassteiner
 * @date Aug 5, 2010
 * @version $Id: PreparedStatementHandler.java,v 1.2 2010-09-28 17:01:27 norbert Exp $
 */
package com.gentics.contentnode.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.gentics.contentnode.factory.TransactionException;

public interface PreparedStatementHandler {

	/**
	 * Get a prepared statement for a reading statement. If the statement shall
	 * be used for writing, or needs to read data that has been written during
	 * the same transaction (during the publishing process), use
	 * {@link #prepareStatement(String, int)} with the type set accordingly.
	 * @param sql sql statement
	 * @return prepared statement
	 * @throws SQLException
	 * @throws TransactionException
	 */
	PreparedStatement prepareStatement(String sql) throws SQLException, TransactionException;
    
	/**
	 * Get a prepared statement of given type (select, insert, update or delete)
	 * @param sql sql statement
	 * @param type Type of the statement - e.g. some transactions might handle reading
	 *              statements and writing statements differently
	 * @return
	 * @throws SQLException
	 */
	PreparedStatement prepareStatement(String sql, int type) throws SQLException, TransactionException;

	/**
	 * Get a prepared statement
	 * @param sql sql statement
	 * @param resultSetType result set type
	 * @param resultSetConcurrency concurrency level
	 * @return prepared statement
	 * @throws SQLException
	 */
	PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException, TransactionException;

	/**
	 * Get a prepared statement that has the capability to retrieve autogenerated keys
	 * @param sql sql statement
	 * @return prepared statement
	 * @throws SQLException
	 */
	PreparedStatement prepareInsertStatement(String sql) throws SQLException, TransactionException;
    
	/**
	 * Get a prepared statement suitable for updating
	 * @param sql sql statement
	 * @return prepared statement
	 * @throws SQLException
	 */
	PreparedStatement prepareUpdateStatement(String sql) throws SQLException, TransactionException;
    
	/**
	 * Get a prepared statement suitable for deleting
	 * @param sql sql statement
	 * @return prepared statement
	 * @throws SQLException
	 */
	PreparedStatement prepareDeleteStatement(String sql) throws SQLException, TransactionException;

	/**
	 * Get a prepared statement that can be used to select and then update the resultset
	 * @param sql sql statement
	 * @return prepared statement
	 * @throws SQLException
	 * @throws TransactionException
	 */
	PreparedStatement prepareSelectForUpdate(String sql) throws SQLException, TransactionException;

	/**
	 * Close the prepared statement. This method should be called after usage of
	 * a statement fetched via {@link #prepareStatement(String)}.
	 * @param statement statement
	 */
	void closeStatement(PreparedStatement statement);

	/**
	 * Close the resultset
	 * @param resultSet result set to close
	 */
	void closeResultSet(ResultSet resultSet);
}
