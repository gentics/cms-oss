/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package com.gentics.lib.expressionparser.parser;

import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.StringReader;

public class Parser/* @bgen(jjtree)*/implements ParserTreeConstants, ParserConstants { /* @bgen(jjtree)*/
	protected JJTParserState jjtree = new JJTParserState();
	public static void main(String args[]) {
		if (args.length > 0) {
			System.out.println("Reading from file " + args[0]);
			try {
				File file = new File(args[0]);
				BufferedReader reader = new BufferedReader(new FileReader(file));
				String read = null;

				while ((read = reader.readLine()) != null) {
					if (!read.startsWith("#") && read.length() > 0) {
						try {
							System.out.print("Testing expression " + read + "...");
							Parser t = new Parser(new StringReader(read));
							ASTStatement n = t.Statement();

							n.dump("");
							System.out.println("OK");
						} catch (Exception e) {
							System.out.println();
							e.printStackTrace(System.out);
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace(System.out);
			}
		} else {
			System.out.println("Reading from standard input...");
			Parser t = new Parser(System.in);

			try {
				ASTStatement n = t.Statement();

				n.dump("");
				System.out.println("Thank you.");
			} catch (Exception e) {
				System.out.println("Oops.");
				System.out.println(e.getMessage());
				e.printStackTrace(System.out);
			}
		}
	}

	/*
	 * Expression syntax
	 */
	final public void Function() throws ParseException {

		/* @bgen(jjtree) Function */
		ASTFunction jjtn000 = new ASTFunction(this, JJTFUNCTION);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		Token t;

		try {
			t = jj_consume_token(IDENTIFIER);
			jjtn000.setName(t.image);
			Arguments();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) { {
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) { {
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			} {
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Name() throws ParseException {

		/* @bgen(jjtree) Name */
		ASTName jjtn000 = new ASTName(this, JJTNAME);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		Token t;

		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PATH:
				t = jj_consume_token(PATH);
				break;

			case IDENTIFIER:
				t = jj_consume_token(IDENTIFIER);
				break;

			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.addPart(t.image);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public ASTStatement Statement() throws ParseException {

		/* @bgen(jjtree) Statement */
		ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		try {
			Expression();
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false; {
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) { {
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) { {
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			} {
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public void Expression() throws ParseException {
		if (jj_2_1(2147483647)) {
			Assignment();
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case PATH:
			case IDENTIFIER:
			case LPAREN:
			case LBRACKET:
			case BANG:
			case PLUS:
			case MINUS:
				ConditionalExpression();
				break;

			default:
				jj_la1[1] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void Assignment() throws ParseException {

		/* @bgen(jjtree) Assignment */
		ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		Token t;

		try {
			Name();
			t = AssignmentOperator();
			Expression();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator(t.image);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) { {
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) { {
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			} {
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public Token AssignmentOperator() throws ParseException {
		Token t;

		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case ASSIGN:
			t = jj_consume_token(ASSIGN);
			break;

		case PLUSASSIGN:
			t = jj_consume_token(PLUSASSIGN);
			break;

		case MINUSASSIGN:
			t = jj_consume_token(MINUSASSIGN);
			break;

		default:
			jj_la1[2] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		} {
			if (true) {
				return t;
			}
		}
		throw new Error("Missing return statement in function");
	}

	// TODO think about this (and test this)
	final public void ConditionalExpression() throws ParseException {
		ConditionalAndOrExpression();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case HOOK:
			jj_consume_token(HOOK);
			Expression();
			jj_consume_token(COLON);
			ConditionalExpression();
			break;

		default:
			jj_la1[3] = jj_gen;
			;
		}
	}

	final public void ConditionalAndOrExpression() throws ParseException {
		EqualityExpression();
		label_1:
		while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case AND:
			case OR:
			case SC_OR:
			case SC_AND:
				;
				break;

			default:
				jj_la1[4] = jj_gen;
				break label_1;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case AND:
			case SC_AND:
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case SC_AND:
					jj_consume_token(SC_AND);
					break;

				case AND:
					jj_consume_token(AND);
					break;

				default:
					jj_la1[5] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				ASTAnd jjtn001 = new ASTAnd(this, JJTAND);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					EqualityExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case OR:
			case SC_OR:
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case SC_OR:
					jj_consume_token(SC_OR);
					break;

				case OR:
					jj_consume_token(OR);
					break;

				default:
					jj_la1[6] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				ASTOr jjtn002 = new ASTOr(this, JJTOR);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					EqualityExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void EqualityExpression() throws ParseException {
		ComparisonExpression();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case EQ:
		case NE:
		case 74:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case EQ:
				jj_consume_token(EQ);
				ASTEquals jjtn001 = new ASTEquals(this, JJTEQUALS);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					ComparisonExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case NE:
				jj_consume_token(NE);
				ASTUnequals jjtn002 = new ASTUnequals(this, JJTUNEQUALS);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					ComparisonExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			case 74:
				jj_consume_token(74);
				ASTUnequals jjtn003 = new ASTUnequals(this, JJTUNEQUALS);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);
				try {
					ComparisonExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte003;
							}
						}
					}
					if (jjte003 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte003;
							}
						}
					} {
						if (true) {
							throw (Error) jjte003;
						}
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;

			default:
				jj_la1[8] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;

		default:
			jj_la1[9] = jj_gen;
			;
		}
	}

	final public void ComparisonExpression() throws ParseException {
		RelationalExpression();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LIKE:
		case CONTAINSONEOF:
		case CONTAINSNONE:
		case CONTAINSALL:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LIKE:
				jj_consume_token(LIKE);
				ASTLike jjtn001 = new ASTLike(this, JJTLIKE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					RelationalExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case CONTAINSONEOF:
				jj_consume_token(CONTAINSONEOF);
				ASTContainsoneof jjtn002 = new ASTContainsoneof(this, JJTCONTAINSONEOF);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					RelationalExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			case CONTAINSNONE:
				jj_consume_token(CONTAINSNONE);
				ASTContainsnone jjtn003 = new ASTContainsnone(this, JJTCONTAINSNONE);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);
				try {
					RelationalExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte003;
							}
						}
					}
					if (jjte003 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte003;
							}
						}
					} {
						if (true) {
							throw (Error) jjte003;
						}
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;

			case CONTAINSALL:
				jj_consume_token(CONTAINSALL);
				ASTContainsall jjtn004 = new ASTContainsall(this, JJTCONTAINSALL);
				boolean jjtc004 = true;

				jjtree.openNodeScope(jjtn004);
				try {
					RelationalExpression();
				} catch (Throwable jjte004) {
					if (jjtc004) {
						jjtree.clearNodeScope(jjtn004);
						jjtc004 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte004 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte004;
							}
						}
					}
					if (jjte004 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte004;
							}
						}
					} {
						if (true) {
							throw (Error) jjte004;
						}
					}
				} finally {
					if (jjtc004) {
						jjtree.closeNodeScope(jjtn004, 2);
					}
				}
				break;

			default:
				jj_la1[10] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;

		default:
			jj_la1[11] = jj_gen;
			;
		}
	}

	final public void RelationalExpression() throws ParseException {
		AdditiveExpression();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case GT:
		case LT:
		case LE:
		case GE:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LT:
				jj_consume_token(LT);
				ASTSmaller jjtn001 = new ASTSmaller(this, JJTSMALLER);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					AdditiveExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case GT:
				jj_consume_token(GT);
				ASTGreater jjtn002 = new ASTGreater(this, JJTGREATER);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					AdditiveExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			case LE:
				jj_consume_token(LE);
				ASTSmallerOrEqual jjtn003 = new ASTSmallerOrEqual(this, JJTSMALLEROREQUAL);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);
				try {
					AdditiveExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte003;
							}
						}
					}
					if (jjte003 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte003;
							}
						}
					} {
						if (true) {
							throw (Error) jjte003;
						}
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;

			case GE:
				jj_consume_token(GE);
				ASTGreaterOrEqual jjtn004 = new ASTGreaterOrEqual(this, JJTGREATEROREQUAL);
				boolean jjtc004 = true;

				jjtree.openNodeScope(jjtn004);
				try {
					AdditiveExpression();
				} catch (Throwable jjte004) {
					if (jjtc004) {
						jjtree.clearNodeScope(jjtn004);
						jjtc004 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte004 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte004;
							}
						}
					}
					if (jjte004 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte004;
							}
						}
					} {
						if (true) {
							throw (Error) jjte004;
						}
					}
				} finally {
					if (jjtc004) {
						jjtree.closeNodeScope(jjtn004, 2);
					}
				}
				break;

			default:
				jj_la1[12] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;

		default:
			jj_la1[13] = jj_gen;
			;
		}
	}

	final public void AdditiveExpression() throws ParseException {
		MultiplicativeExpression();
		label_2:
		while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
			case MINUS:
				;
				break;

			default:
				jj_la1[14] = jj_gen;
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
				jj_consume_token(PLUS);
				ASTAdd jjtn001 = new ASTAdd(this, JJTADD);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					MultiplicativeExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case MINUS:
				jj_consume_token(MINUS);
				ASTSubtract jjtn002 = new ASTSubtract(this, JJTSUBTRACT);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					MultiplicativeExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			default:
				jj_la1[15] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void MultiplicativeExpression() throws ParseException {
		UnaryExpression();
		label_3:
		while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STAR:
			case SLASH:
			case REM:
				;
				break;

			default:
				jj_la1[16] = jj_gen;
				break label_3;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STAR:
				jj_consume_token(STAR);
				ASTMult jjtn001 = new ASTMult(this, JJTMULT);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);
				try {
					UnaryExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte001;
							}
						}
					}
					if (jjte001 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte001;
							}
						}
					} {
						if (true) {
							throw (Error) jjte001;
						}
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case SLASH:
				jj_consume_token(SLASH);
				ASTDiv jjtn002 = new ASTDiv(this, JJTDIV);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);
				try {
					UnaryExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte002;
							}
						}
					}
					if (jjte002 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte002;
							}
						}
					} {
						if (true) {
							throw (Error) jjte002;
						}
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			case REM:
				jj_consume_token(REM);
				ASTMod jjtn003 = new ASTMod(this, JJTMOD);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);
				try {
					UnaryExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) { {
							if (true) {
								throw (RuntimeException) jjte003;
							}
						}
					}
					if (jjte003 instanceof ParseException) { {
							if (true) {
								throw (ParseException) jjte003;
							}
						}
					} {
						if (true) {
							throw (Error) jjte003;
						}
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;

			default:
				jj_la1[17] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void UnaryExpression() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PLUS:
			jj_consume_token(PLUS);
			ASTPlus jjtn001 = new ASTPlus(this, JJTPLUS);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);
			try {
				UnaryExpression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) { {
						if (true) {
							throw (RuntimeException) jjte001;
						}
					}
				}
				if (jjte001 instanceof ParseException) { {
						if (true) {
							throw (ParseException) jjte001;
						}
					}
				} {
					if (true) {
						throw (Error) jjte001;
					}
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			break;

		case MINUS:
			jj_consume_token(MINUS);
			ASTMinus jjtn002 = new ASTMinus(this, JJTMINUS);
			boolean jjtc002 = true;

			jjtree.openNodeScope(jjtn002);
			try {
				UnaryExpression();
			} catch (Throwable jjte002) {
				if (jjtc002) {
					jjtree.clearNodeScope(jjtn002);
					jjtc002 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte002 instanceof RuntimeException) { {
						if (true) {
							throw (RuntimeException) jjte002;
						}
					}
				}
				if (jjte002 instanceof ParseException) { {
						if (true) {
							throw (ParseException) jjte002;
						}
					}
				} {
					if (true) {
						throw (Error) jjte002;
					}
				}
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, true);
				}
			}
			break;

		case FALSE:
		case NULL:
		case TRUE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case PATH:
		case IDENTIFIER:
		case LPAREN:
		case LBRACKET:
		case BANG:
			UnaryExpressionNotPlusMinus();
			break;

		default:
			jj_la1[18] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void UnaryExpressionNotPlusMinus() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case BANG:
			jj_consume_token(BANG);
			ASTNot jjtn001 = new ASTNot(this, JJTNOT);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);
			try {
				UnaryExpression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) { {
						if (true) {
							throw (RuntimeException) jjte001;
						}
					}
				}
				if (jjte001 instanceof ParseException) { {
						if (true) {
							throw (ParseException) jjte001;
						}
					}
				} {
					if (true) {
						throw (Error) jjte001;
					}
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, 1);
				}
			}
			break;

		case FALSE:
		case NULL:
		case TRUE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case PATH:
		case IDENTIFIER:
		case LPAREN:
		case LBRACKET:
			PrimaryExpression();
			break;

		default:
			jj_la1[19] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void PrimaryExpression() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case FALSE:
		case NULL:
		case TRUE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case LBRACKET:
			Literal();
			break;

		case LPAREN:
			jj_consume_token(LPAREN);
			Expression();
			jj_consume_token(RPAREN);
			break;

		default:
			jj_la1[20] = jj_gen;
			if (jj_2_2(2147483647)) {
				Function();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case PATH:
				case IDENTIFIER:
					Name();
					break;

				default:
					jj_la1[21] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
	}

	final public void Literal() throws ParseException {
		Token t;

		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case INTEGER_LITERAL:
			t = jj_consume_token(INTEGER_LITERAL);
			ASTInteger jjtn001 = new ASTInteger(this, JJTINTEGER);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);
			try {
				jjtree.closeNodeScope(jjtn001, true);
				jjtc001 = false;
				jjtn001.setValue(t.image);
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			break;

		case FLOATING_POINT_LITERAL:
			t = jj_consume_token(FLOATING_POINT_LITERAL);
			ASTFloat jjtn002 = new ASTFloat(this, JJTFLOAT);
			boolean jjtc002 = true;

			jjtree.openNodeScope(jjtn002);
			try {
				jjtree.closeNodeScope(jjtn002, true);
				jjtc002 = false;
				jjtn002.setValue(t.image);
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, true);
				}
			}
			break;

		case CHARACTER_LITERAL:
			t = jj_consume_token(CHARACTER_LITERAL);
			ASTString jjtn003 = new ASTString(this, JJTSTRING);
			boolean jjtc003 = true;

			jjtree.openNodeScope(jjtn003);
			try {
				jjtree.closeNodeScope(jjtn003, true);
				jjtc003 = false;
				jjtn003.setValue(t.image);
			} finally {
				if (jjtc003) {
					jjtree.closeNodeScope(jjtn003, true);
				}
			}
			break;

		case STRING_LITERAL:
			t = jj_consume_token(STRING_LITERAL);
			ASTString jjtn004 = new ASTString(this, JJTSTRING);
			boolean jjtc004 = true;

			jjtree.openNodeScope(jjtn004);
			try {
				jjtree.closeNodeScope(jjtn004, true);
				jjtc004 = false;
				jjtn004.setValue(t.image);
			} finally {
				if (jjtc004) {
					jjtree.closeNodeScope(jjtn004, true);
				}
			}
			break;

		case LBRACKET:
			Array();
			break;

		case TRUE:
			True();
			break;

		case FALSE:
			False();
			break;

		case NULL:
			Null();
			break;

		default:
			jj_la1[22] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void Array() throws ParseException {

		/* @bgen(jjtree) Array */
		ASTArray jjtn000 = new ASTArray(this, JJTARRAY);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_3(2)) {
				jj_consume_token(LBRACKET);
				jj_consume_token(RBRACKET);
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LBRACKET:
					jj_consume_token(LBRACKET);
					Literal();
					label_4:
					while (true) {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case COMMA:
							;
							break;

						default:
							jj_la1[23] = jj_gen;
							break label_4;
						}
						jj_consume_token(COMMA);
						Literal();
					}
					jj_consume_token(RBRACKET);
					break;

				default:
					jj_la1[24] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) { {
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) { {
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			} {
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void True() throws ParseException {

		/* @bgen(jjtree) True */
		ASTTrue jjtn000 = new ASTTrue(this, JJTTRUE);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(TRUE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void False() throws ParseException {

		/* @bgen(jjtree) False */
		ASTFalse jjtn000 = new ASTFalse(this, JJTFALSE);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(FALSE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Null() throws ParseException {

		/* @bgen(jjtree) Null */
		ASTNull jjtn000 = new ASTNull(this, JJTNULL);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(NULL);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Arguments() throws ParseException {
		jj_consume_token(LPAREN);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case FALSE:
		case NULL:
		case TRUE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case PATH:
		case IDENTIFIER:
		case LPAREN:
		case LBRACKET:
		case BANG:
		case PLUS:
		case MINUS:
			ArgumentList();
			break;

		default:
			jj_la1[25] = jj_gen;
			;
		}
		jj_consume_token(RPAREN);
	}

	final public void ArgumentList() throws ParseException {
		Expression();
		label_5:
		while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case COMMA:
				;
				break;

			default:
				jj_la1[26] = jj_gen;
				break label_5;
			}
			jj_consume_token(COMMA);
			Expression();
		}
	}

	final private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	final private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	final private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	final private boolean jj_3R_6() {
		Token xsp;

		xsp = jj_scanpos;
		if (jj_scan_token(23)) {
			jj_scanpos = xsp;
			if (jj_scan_token(24)) {
				return true;
			}
		}
		return false;
	}

	final private boolean jj_3_1() {
		if (jj_3R_6()) {
			return true;
		}
		if (jj_3R_7()) {
			return true;
		}
		return false;
	}

	final private boolean jj_3_2() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		if (jj_scan_token(LPAREN)) {
			return true;
		}
		return false;
	}

	final private boolean jj_3R_7() {
		Token xsp;

		xsp = jj_scanpos;
		if (jj_scan_token(37)) {
			jj_scanpos = xsp;
			if (jj_scan_token(63)) {
				jj_scanpos = xsp;
				if (jj_scan_token(64)) {
					return true;
				}
			}
		}
		return false;
	}

	final private boolean jj_3_3() {
		if (jj_scan_token(LBRACKET)) {
			return true;
		}
		if (jj_scan_token(RBRACKET)) {
			return true;
		}
		return false;
	}

	public ParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	public boolean lookingAhead = false;
	private boolean jj_semLA;
	private int jj_gen;
	final private int[] jj_la1 = new int[27];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static {
		jj_la1_0();
		jj_la1_1();
		jj_la1_2();
	}
	private static void jj_la1_0() {
		jj_la1_0 = new int[] {
			0x1800000, 0x11e881c0, 0x0, 0x0, 0x6000, 0x2000, 0x4000, 0x6000, 0x0, 0x0, 0x1e00, 0x1e00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x11e881c0, 0x11e881c0, 0x106881c0, 0x1800000, 0x6881c0, 0x0, 0x0, 0x11e881c0, 0x0, };
	}

	private static void jj_la1_1() {
		jj_la1_1 = new int[] {
			0x0, 0x300101, 0x80000020, 0x400, 0x30000, 0x20000, 0x10000, 0x30000, 0x9000, 0x9000, 0x0, 0x0, 0x60c0, 0x60c0, 0x300000,
			0x300000, 0x8c00000, 0x8c00000, 0x300101, 0x101, 0x1, 0x0, 0x1, 0x8, 0x1, 0x300101, 0x8, };
	}

	private static void jj_la1_2() {
		jj_la1_2 = new int[] {
			0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400, 0x400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, };
	}
	final private JJCalls[] jj_2_rtns = new JJCalls[3];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	public Parser(java.io.InputStream stream) {
		this(stream, null);
	}

	public Parser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public Parser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public Parser(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public void ReInit(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;

		if ((oldToken = token).next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];

					while (c != null) {
						if (c.gen < jj_gen) {
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {}
	final private LookaheadSuccess jj_ls = new LookaheadSuccess();
	final private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;

			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) {
				jj_add_error_token(kind, i);
			}
		}
		if (jj_scanpos.kind != kind) {
			return true;
		}
		if (jj_la == 0 && jj_scanpos == jj_lastpos) {
			throw jj_ls;
		}
		return false;
	}

	final public Token getNextToken() {
		if (token.next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = lookingAhead ? jj_scanpos : token;

		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = token_source.getNextToken();
			}
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null) {
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		} else {
			return (jj_ntk = jj_nt.kind);
		}
	}

	private java.util.Vector jj_expentries = new java.util.Vector();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) {
			return;
		}
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;

			for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
				int[] oldentry = (int[]) (e.nextElement());

				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists) {
						break;
					}
				}
			}
			if (!exists) {
				jj_expentries.addElement(jj_expentry);
			}
			if (pos != 0) {
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[75];

		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 27; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 75; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];

		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {}

	final public void disable_tracing() {}

	final private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 3; i++) {
			try {
				JJCalls p = jj_2_rtns[i];

				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;

						case 1:
							jj_3_2();
							break;

						case 2:
							jj_3_3();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {}
		}
		jj_rescan = false;
	}

	final private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];

		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
