package com.gentics.lib.db;

import java.io.File;
import java.sql.Connection;
import java.util.List;
import java.util.Vector;

import com.gentics.lib.io.FileRemover;

/**
 * Wrapper for a {@link Connection} instance. Instances of this class are
 * generated by instances of {@link Connector} and passed to {@link DB} for
 * performing sql requests.<br>
 * @author Erwin Mascher (e.mascher@gentics.com) Date: 27.01.2004
 */
public class PoolConnection {

	/**
	 * Id of the pool connection
	 */
	private int id;

	/**
	 * Instance of the underlying {@link Connection} object
	 */
	private Connection connection;

	/**
	 * true when the connection has a running transaction, false if not
	 */
	private boolean runningTransaction = false;

	/**
	 * List of files to be removed, when the connection is committed
	 */
	private List<File> filesToRemoveOnCommit = new Vector<File>();

	/**
	 * List of files to be removed, when the connection is rolled back
	 */
	private List<File> filesToRemoveOnRollback = new Vector<File>();

	/**
	 * Create an instance of the pool connection
	 * @param id id of the pool connection
	 * @param connection connection instance
	 */
	public PoolConnection(int id, Connection connection) {
		this(id, connection, false);
	}

	/**
	 * Create an instance of the pool connection
	 * @param id id of the pool connection
	 * @param connection connection instance
	 * @param runningTransaction true when the pool connection has a running connection, false if not.
	 */
	public PoolConnection(int id, Connection connection, boolean runningTransaction) {
		this.id = id;
		this.connection = connection;
		this.runningTransaction = runningTransaction;
	}

	/**
	 * Add a file that needs to be removed, when this connection is committed
	 * @param file file
	 */
	public synchronized void removeFileOnCommit(File file) {
		filesToRemoveOnCommit.add(file);
	}

	/**
	 * Add a file that needs to be removed, when this connection is rolled back
	 * @param file file
	 */
	public synchronized void removeFileOnRollback(File file) {
		filesToRemoveOnRollback.add(file);
	}

	/**
	 * Remove the files, that were added via {@link #removeFileOnCommit(File)}.
	 */
	public synchronized void onCommit() {
		for (File file : filesToRemoveOnCommit) {
			FileRemover.removeFile(file);
		}
		filesToRemoveOnCommit.clear();

		// Clear filesToRemoveOnRollback, so they don't get rolled back with a later transaction
		filesToRemoveOnRollback.clear();
	}

	/**
	 * Remove the files, that were added via {@link #removeFileOnRollback(File)}.
	 */
	public synchronized void onRollback() {
		for (File file : filesToRemoveOnRollback) {
			FileRemover.removeFile(file);
		}
		filesToRemoveOnRollback.clear();

		// Clear filesToRemoveOnCommit, so they don't get committed with a later transaction
		filesToRemoveOnCommit.clear();
	}

	/**
	 * Get the id
	 * @return id
	 */
	public int getID() {
		return id;
	}

	/**
	 * Get the connection instance
	 * @return connection instance
	 */
	public Connection getConnection() {
		return connection;
	}

	/**
	 * Return true when the pool connection has a running transaction, false if not
	 * @return true for running transactions, false for no running transaction
	 */
	public boolean isRunningTransaction() {
		return runningTransaction;
	}
}
