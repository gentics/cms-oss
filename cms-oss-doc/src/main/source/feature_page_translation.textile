  h2. Automatic page translation

  When the feature _translation_ is activated for a node, pages can be automatically translated by utilizing a translation service.

  endprologue.

  h3. Activating Feature

  The feature must be generally activated:

  <javascript filename="conf/features.yml">
  feature:
    translation: true
  </javascript>

  NOTE: Changing the general setting for the feature requires the CMS to be restarted.

  Once the feature is generally activated, it can be turned on and off for each node using the UI by a user with edit permission on the node:

  # Choose _Features_ from the Context Menu of the Node in the tree.
  # Activate the checkbox next to _translation_
  # Click _OK_ to activate the feature

  NOTE: If the option _Features_ is missing from the context menu, or the feature _translation_ is not listed in the features activation dialog, the feature _translation_ is probably not generally activated.

  h3. How the feature works

  Automatic page translation is a feature that can be used to translate existing pages automatically by utilizing an (external) translation service.
  When configured properly the automatic translation can be used directly in the UI in the translation modal. Furthermore, this feature can be used directly via the REST API (see API reference) to translate pages or simple text.


  h3. Requirements:

  The following requirements need to be satisfied:

  * The feature needs to be enabled
  * A valid license for the feature 'TRANS'
  * An implementation of the _TranslationInterface_ in the classpath
  * Valid account if the service is external (e.g.: API token, remaining quota, etc.)


  h3. Service Implementation

  The translation service implementation is defined via an interface, thus the concrete implementation can be any implementation of the _TranslationInterface_.
  The concrete implementation gets picked up by the Java ServiceLoader. Therefore, the implementation needs to be in the Java classpath.
  A reference implementation is provided by Gentics, the DeepL translation service. To be able to use it, one has to bind the implementation to the  _TranslationInterface_.
  In the following example a folder, namely _external_resources_ shows the required folder structure and the implementation detail for the DeepL translation service.

  NOTE: The folder _external_resources_ can be arbitrary.

  <shell filename="/external_resources/META-INF/services/com.gentics.contentnode.api.translation.TranslationService">
    com.gentics.contentnode.translation.DeepLTranslationService
  </shell>

  Instead of the DeepLTranslationService a custom implementation can be used as well.

  h3. Configuration

  Configuration example for DeepL:

  <shell filename="config.yml">
  translation:
    auth:
      token: <api-token>
    language:
      en: US
      pt: BR
  </shell>

  The language configuration is needed as DeepL offers multiple flavors for English and Portuguese.
