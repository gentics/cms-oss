/* Generated By:JJTree: Do not edit this line. ASTName.java */

package com.gentics.lib.expressionparser.parser;

import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.gentics.api.lib.exception.UnknownPropertyException;
import com.gentics.api.lib.expressionparser.EvaluableExpression;
import com.gentics.api.lib.expressionparser.EvaluationException;
import com.gentics.api.lib.expressionparser.Expression;
import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParser;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.ExpressionQueryRequest;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;
import com.gentics.api.lib.expressionparser.filtergenerator.FilterPart;
import com.gentics.lib.log.NodeLogger;

public class ASTName extends SimpleNode implements EvaluableExpression {
	protected List parts = new Vector();

	protected StringBuffer nameBuffer = new StringBuffer();

	protected String name = null;

	public ASTName(int id) {
		super(id);
	}

	public ASTName(Parser p, int id) {
		super(p, id);
	}

	public void addPart(String part) {
		if (part == null) {
			return;
		}
		if (part.indexOf('.') >= 0) {
			String[] partParts = part.split("\\.");

			for (int i = 0; i < partParts.length; i++) {
				addPart(partParts[i]);
			}
		} else {
			name = null;
			if (parts.size() > 0) {
				nameBuffer.append(".");
			}
			nameBuffer.append(part);
			parts.add(part);
		}
	}

	public String toString() {
		return parts.toString() + " (Object)";
	}

	public synchronized String getObjectName() {
		if (name == null) {
			name = nameBuffer.toString();
			nameBuffer = null;
		}
		return name;
	}

	public boolean isStatic(DatasourceFilter filter) throws ExpressionParserException {
		return false;
	}

	public boolean isVariable(DatasourceFilter filter) throws ExpressionParserException {
		return parts.size() > 0 && "object".equals(parts.get(0));
	}

	public Object evaluate(ExpressionQueryRequest request, int expectedValueType) throws ExpressionParserException {
		try {
			String name = getObjectName();
			Object value = request.getResolver().resolve(name);

			if (value == null && expectedValueType != ExpressionEvaluator.OBJECTTYPE_NULL) {
				// First check if there is a backward compatibility mode activated by
				// request object.
				if ("content.node".equals(ExpressionParser.getExpressionParserMode(request))) {
					// for compatibility with content.node, we return the name
					// when it does not resolve (content.node allows strings in
					// expressions without quotes)
					value = name;
				} else if (ExpressionParser.isCompatibilityTestMode()) {
					// we resolved a name into null and are in compatibility
					// test mode, so give a warning.
					NodeLogger.getNodeLogger(getClass()).warn(
							"The object path {" + name + "} in the expression {" + getExpressionString() + "} was resolved into null. When {" + name
							+ "} should be a string literal," + " you have to enclose it by \"\"");
				}
			}
			return ExpressionEvaluator.getAsType(value, expectedValueType);
		} catch (UnknownPropertyException e) {
			throw new EvaluationException(e);
		}
	}

	public void generateFilterPart(ExpressionQueryRequest request, FilterPart filterPart, int expectedValueType) throws ExpressionParserException {
		if (isVariable(request.getFilter())) {
			filterPart.addVariable(getObjectName(), expectedValueType);
		} else {
			filterPart.addResolvableObject(getObjectName(), expectedValueType);
		}
	}

	/* (non-Javadoc)
	 * @see com.gentics.lib.expressionparser.Expression#getExpressionString()
	 */
	public String getExpressionString() {
		if (parent instanceof Expression) {
			return ((Expression) parent).getExpressionString();
		} else {
			return null;
		}
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#allowsNullValues()
	 */
	public boolean allowsNullValues(DatasourceFilter filter) throws ExpressionParserException {
		if (isVariable(filter)) {
			return filter.allowsNullValues((String) parts.get(parts.size() - 1));
		} else {
			return true;
		}
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		if (isVariable(filter)) {
			return filter.getValueType((String) parts.get(parts.size() - 1));
		} else {
			return ExpressionEvaluator.OBJECTTYPE_ANY;
		}
	}
}
