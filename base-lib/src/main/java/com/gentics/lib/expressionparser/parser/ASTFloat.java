/* Generated By:JJTree: Do not edit this line. ASTFloat.java */

package com.gentics.lib.expressionparser.parser;

import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParser;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;
import com.gentics.lib.log.NodeLogger;

public class ASTFloat extends LiteralNode {
	protected Double value;

	protected String setValue;

	public ASTFloat(int id) {
		super(id);
	}

	public ASTFloat(Parser p, int id) {
		super(p, id);
	}

	public void setValue(String value) {
		this.value = new Double(Double.parseDouble(value));
		if (ExpressionParser.isCompatibilityTestMode()) {
			// in test mode, check whether the float literal was not written in its natural syntax and generate a warning (later)
			if (!this.value.toString().equals(value)) {
				setValue = value;
			}
		}
	}

	public String toString() {
		return value + " (Float)";
	}

	protected Object getLiteralValue() {
		if (setValue != null) {
			NodeLogger.getNodeLogger(getClass()).warn(
					"The literal {" + setValue + "} in the expression {" + getExpressionString() + "} is interpreted as floating point number {" + value + "}. If {"
					+ setValue + "} should be a string, you have to enclose it by \"\".");
		}
		return value;
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		return ExpressionEvaluator.OBJECTTYPE_NUMBER;
	}
}
