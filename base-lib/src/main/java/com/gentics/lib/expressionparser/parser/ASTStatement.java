/* Generated By:JJTree: Do not edit this line. ASTStatement.java */

package com.gentics.lib.expressionparser.parser;

import com.gentics.api.lib.expressionparser.EvaluableExpression;
import com.gentics.api.lib.expressionparser.EvaluationException;
import com.gentics.api.lib.expressionparser.ExpressionEvaluator;
import com.gentics.api.lib.expressionparser.ExpressionParserException;
import com.gentics.api.lib.expressionparser.ExpressionQueryRequest;
import com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter;
import com.gentics.api.lib.expressionparser.filtergenerator.FilterGeneratorException;
import com.gentics.api.lib.expressionparser.filtergenerator.FilterPart;

public class ASTStatement extends SimpleNode implements EvaluableExpression {
	protected String expression;

	public ASTStatement(int id) {
		super(id);
	}

	public ASTStatement(Parser p, int id) {
		super(p, id);
	}

	public void generateFilterPart(ExpressionQueryRequest request, FilterPart filterPart,
			int expectedValueType) throws ExpressionParserException {
		try {
			if (children != null && children.length > 0 && children[0] instanceof EvaluableExpression) {
				((EvaluableExpression) children[0]).generateFilterPart(request, filterPart, expectedValueType);
			} else {
				throw new FilterGeneratorException("expression is not evaluable");
			}
		} catch (FilterGeneratorException e) {
			// set the expression into the exception
			e.setExpressionString(expression);
			e.setDatasourceClassName(request.getFilter().getDatasourceClass().getName());
			throw e;
		} catch (ExpressionParserException e) {
			// encapsulate all other exceptions into a filter generator
			// exception
			FilterGeneratorException e1 = new FilterGeneratorException(e);

			e1.setExpressionString(expression);
			e1.setDatasourceClassName(request.getFilter().getDatasourceClass().getName());
			throw e1;
		}
	}

	public Object evaluate(ExpressionQueryRequest request, int expectedValueType) throws ExpressionParserException {
		try {
			if (children != null && children.length > 0 && children[0] instanceof EvaluableExpression) {
				return ((EvaluableExpression) children[0]).evaluate(request, expectedValueType);
			} else {
				throw new EvaluationException("expression is not evaluable");
			}
		} catch (EvaluationException e) {
			// set the expression into the exception
			e.setExpressionString(expression);
			throw e;
		}
	}

	public boolean isStatic(DatasourceFilter filter) throws ExpressionParserException {
		if (children != null && children.length > 0 && children[0] instanceof EvaluableExpression) {
			return ((EvaluableExpression) children[0]).isStatic(filter);
		} else {
			return true;
		}
	}

	public boolean isVariable(DatasourceFilter filter) throws ExpressionParserException {
		if (children != null && children.length > 0 && children[0] instanceof EvaluableExpression) {
			return ((EvaluableExpression) children[0]).isVariable(filter);
		} else {
			return false;
		}
	}

	public void setExpression(String expression) {
		this.expression = expression;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		if (expression != null) {
			return expression;
		} else {
			return super.toString();
		}
	}

	/* (non-Javadoc)
	 * @see com.gentics.lib.expressionparser.Expression#getExpressionString()
	 */
	public String getExpressionString() {
		return toString();
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#allowsNullValues(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public boolean allowsNullValues(DatasourceFilter filter) throws ExpressionParserException {
		return false;
	}

	/* (non-Javadoc)
	 * @see com.gentics.api.lib.expressionparser.EvaluableExpression#getExpectedValueType(com.gentics.api.lib.expressionparser.filtergenerator.DatasourceFilter)
	 */
	public int getExpectedValueType(DatasourceFilter filter) throws ExpressionParserException {
		if (children != null && children.length > 0 && children[0] instanceof EvaluableExpression) {
			return ((EvaluableExpression) children[0]).getExpectedValueType(filter);
		} else {
			return ExpressionEvaluator.OBJECTTYPE_ANY;
		}
	}
}
