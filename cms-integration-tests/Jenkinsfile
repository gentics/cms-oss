// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library') import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)

final def mavenRepositoryBase  = "https://repo.apa-it.at/artifactory"
final def artifactoryUrlPrefix = mavenRepositoryBase + "/gtx-maven-releases-staging-cms-oss"
final def gitCommitTag         = '[Jenkins | ' + env.JOB_BASE_NAME + ']';

def branchName                 = null
def version                    = null
def releaseVersion             = ""
def tagName                    = null

pipeline {
    agent {
        kubernetes {
            label env.BUILD_TAG.take(63)
            defaultContainer 'build'
            yaml ocpWorker("""
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkinsbuild: true
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: jenkinsbuild
              operator: In
              values:
              - true
          topologyKey: kubernetes.io/hostname
  containers:
    - name: build
      image: """ + buildEnvironmentDockerImage("cms-integration-tests/Dockerfile", "cms-oss") + """
      resources:
        requests:
          cpu: '0'
          memory: '0'
        limits:
          cpu: '0'
          memory: '0'
    - name: docker
      resources:
        limits:
          cpu: '0'
          memory: '0'
        requests:
          cpu: '0'
          memory: '0'
    - name: jnlp
      resources:
        limits:
          cpu: '0'
          memory: '0'
        requests:
          cpu: '0'
          memory: '0'
""")
        }
    }

    parameters {
        choice(name: 'variant', choices: ['OSS', 'EE'], description: 'Which type of CMS should be tested')
        string(name: 'cmsVersion', defaultValue: '', description: 'The docker image-version for the CMS which should be tested against')
        string(name: 'meshVersion', defaultValue: '', description: 'The docker image-version for Mesh which should be tested against')
    }

    options {
        withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')])
        gitLabConnection('git.gentics.com')
        gitlabBuilds(builds: ['Jenkins build'])
        timestamps()
        timeout(time: 4, unit: 'HOURS')
        ansiColor('xterm')
    }

    stages {
        stage("UI Integration Tests") {
            when {
                expression {
                    return env.BUILD_SKIPPED != "true"
                }
            }

            environment {
                CMS_VARIANT = "${params.variant}"
                CI_CMS_VERSION = "${params.cmsVersion}"
                CI_MESH_VERSION = "${params.meshVersion}"
            }

            steps {
                updateGitlabCommitStatus name: 'Jenkins build', state: "running"

                script {
                    withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')]) {
                        dir(path: 'cms-integration-tests') {
                            try {
                                // prior to starting the tests, start the docker containers with CMS
                                sh "docker login -u ${repoUsername} -p ${repoPassword} docker.apa-it.at"

                                if (params.variant == 'EE') {
                                    sh "docker compose -f docker-compose.ee.yml up -d --wait --quiet-pull"
                                } else {
                                    sh "docker compose up -d --wait --quiet-pull"
                                }

                                sh "docker compose ps"

                                sh "./integration-test/run-tests.sh"
                            } finally {
                                // finally stop the docker containers
                                sh "docker compose down"
                            }
                        }
                    }
                }
            }

            post {
                always {
                    script {
                        stash name: "cms-ui-integration_${CMS_VARIANT}_${CI_CMS_VERSION}", includes: ".reports/**/CYPRESS-e2e-report.xml"
                    }
                }
            }
        }
    }
}
